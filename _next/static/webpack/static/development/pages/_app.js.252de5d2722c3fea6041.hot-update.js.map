{"version":3,"file":"static/webpack/static/development/pages/_app.js.252de5d2722c3fea6041.hot-update.js","sources":["webpack:///./components/shapes.tsx","webpack:///./components/toggle-switch.tsx"],"sourcesContent":["import React from 'react';\nimport { shape } from 'prop-types';\nimport ToggleSwitch from './toggle-switch';\n\nconst colors = ['#ed6f4d', '#facaa5', '#71c3ad', '#4ca9e0', '#54899c', '#62b3e3', '#c6dcda'];\nconst shapeNames = ['line', 'square', 'circle'];\n\nconst makeRandomInt = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nlet shapes = [];\n\nconst makeShapes = () => {\n  shapes = [];\n  for (let i = 0; i < 40; i++) {\n    const shape = shapeNames[i % 3];\n    shapes.push({\n      x: makeRandomInt(2, 98),\n      y: makeRandomInt(2, 98),\n      width: makeRandomInt(shape === 'line' ? 10 : 5, shape === 'line' ? 15 : 8),\n      rotate: makeRandomInt(0, 180),\n      color: colors[makeRandomInt(0, colors.length - 1)],\n      shape: shapeNames[i % 3],\n      id: uuidv4()\n    });\n  }\n};\n\nmakeShapes();\n\nconst shapeStyles = ({ x, y, width, shape, rotate, color }) => ({\n  position: 'absolute' as const,\n  top: `${y}%`,\n  left: `${x}%`,\n  width: `${width}px`,\n  height: `${shape === 'line' ? '2' : width}px`,\n  opacity: 1 - y / 100,\n  transform: `rotate(${rotate}deg)`,\n  backgroundColor: shape === 'line' ? color : 'transparent',\n  borderColor: color,\n  border: shape === 'line' ? '' : `2px solid ${color}`,\n  borderRadius: shape === 'circle' ? '50%' : 0,\n  zIndex: -1,\n  transition: 'all 10s ease-in-out'\n});\n\nconst Shapes = () => {\n  const [curShapes, setShapes] = React.useState(shapes);\n  const timeout = React.useRef<NodeJS.Timeout | undefined>();\n\n  React.useEffect(() => {\n    setShapes(\n      curShapes.map(shape => ({\n        ...shape,\n        x: makeRandomInt(2, 98),\n        y: makeRandomInt(2, 98)\n      }))\n    );\n\n    timeout.current = setInterval(\n      () =>\n        setShapes(\n          curShapes.map(shape => ({\n            ...shape,\n            x: makeRandomInt(2, 98),\n            y: makeRandomInt(2, 98)\n          }))\n        ),\n      9000\n    );\n\n    return () => clearInterval(timeout.current);\n  }, []);\n  return (\n    <>\n      <ToggleSwitch\n        onChange={() => {\n          setShapes(\n            curShapes.map(shape => ({\n              ...shape,\n              x: makeRandomInt(2, 98),\n              y: makeRandomInt(2, 98)\n            }))\n          );\n        }}\n      />\n      {curShapes.map((shape, i) => (\n        <React.Fragment key={shape.uuid}>\n          <div style={shapeStyles(shape)} />\n          <div style={shapeStyles(shape)} />\n        </React.Fragment>\n      ))}\n    </>\n  );\n};\n\nexport default Shapes;\n","import React from 'react';\n\nconst ToggleSwitch = ({ onChange }) => {\n  <>\n    <style jsx>{`\n      .switch {\n        position: relative;\n        display: inline-block;\n        width: 40px;\n        height: 20px;\n        background-color: rgba(0, 0, 0, 0.25);\n        border-radius: 20px;\n        transition: all 0.3s;\n      }\n      .switch::after {\n        content: '';\n        position: absolute;\n        width: 18px;\n        height: 18px;\n        border-radius: 50%;\n        background-color: white;\n        top: 1px;\n        left: 1px;\n        transition: all 0.3s;\n      }\n\n      .checkbox:checked + .switch::after {\n        left: 20px;\n      }\n      .checkbox:checked + .switch {\n        background-color: #7983ff;\n      }\n      .checkbox {\n        display: none;\n      }\n    `}</style>\n    <input type=\"checkbox\" id=\"toggle\" className=\"checkbox\" onChange={onChange} />\n    <label htmlFor=\"toggle\" className=\"switch\" />\n  </>;\n};\n\nexport default ToggleSwitch;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAHA;AAAA;AAOA;AACA;AAEA;AAEA;AACA;AAHA;AAAA;AAFA;AAWA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAHA;AAAA;AAMA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAiCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;A","sourceRoot":""}